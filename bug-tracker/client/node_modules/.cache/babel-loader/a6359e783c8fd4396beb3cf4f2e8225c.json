{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adam\\\\streams\\\\client\\\\src\\\\Components\\\\GoogleAuth.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GoogleAuth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignedIn: null\n    };\n\n    this.onAuthChange = () => {\n      this.setState({\n        isSignedIn: this.auth.isSignedIn.get()\n      });\n    };\n  }\n\n  // When the component first appears in the DOM load up the Auth2 javascript.\n  // Make a variable that holds the GAPI getAuthInstance() method, which has methods like signIn(),\n  // signOut() and isSignedIn().\n  // Then set the state of isSignedIn equal to the getAuthInstance isSignedIn() method.\n  // Set up a listen method that calls our function when something changed. The function will\n  // set the new state equal to the GAPI isSignedIn method.\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      window.gapi.client.init({\n        clientId: '284084667086-lip1051ib5uc4s4elb4ab52754g7q4ap.apps.googleusercontent.com',\n        scope: 'email'\n      }).then(() => {\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.setState({\n          isSignedIn: this.auth.isSignedIn.get()\n        });\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  // check to see the value of our state isSinedIn and conditionally render our login status\n  // wireup on click handlers for when user presses button to sign in or sign out\n  //\n  renderAuthButton() {\n    if (this.state.isSignedIn === null) {\n      return null;\n    } else if (this.state.isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui red google button\",\n        onClick: this.auth.signout,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), \"Sign Out\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), \"Sign In\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Adam/streams/client/src/Components/GoogleAuth.js"],"names":["React","Component","GoogleAuth","state","isSignedIn","onAuthChange","setState","auth","get","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","signout","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAG9CE,KAH8C,GAGtC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAHsC;;AAAA,SAyB9CC,YAzB8C,GAyB/B,MAAM;AACjB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,UAAU,EAAE,KAAKG,IAAL,CAAUH,UAAV,CAAqBI,GAArB;AAAd,OAAd;AACH,KA3B6C;AAAA;;AAK9C;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACnCF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CAAwB;AACpBC,QAAAA,QAAQ,EAAE,0EADU;AAEpBC,QAAAA,KAAK,EAAE;AAFa,OAAxB,EAGGC,IAHH,CAGQ,MAAM;AACV,aAAKV,IAAL,GAAYG,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ;AACA,aAAKb,QAAL,CAAc;AAAEF,UAAAA,UAAU,EAAE,KAAKG,IAAL,CAAUH,UAAV,CAAqBI,GAArB;AAAd,SAAd;AACA,aAAKD,IAAL,CAAUH,UAAV,CAAqBgB,MAArB,CAA4B,KAAKf,YAAjC;AACH,OAPD;AAQH,KATD;AAUH;;AAMD;AAEA;AACA;AAEAgB,EAAAA,gBAAgB,GAAG;AACf,QAAG,KAAKlB,KAAL,CAAWC,UAAX,KAA0B,IAA7B,EAAmC;AAC/B,aAAO,IAAP;AACH,KAFD,MAEO,IAAI,KAAKD,KAAL,CAAWC,UAAf,EAA2B;AAClC,0BAAQ;AACR,QAAA,SAAS,EAAC,sBADF;AAER,QAAA,OAAO,EAAE,KAAKG,IAAL,CAAUe,OAFX;AAAA,gCAGA;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAMC,KAPM,MAOA;AACH,0BAAQ;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAA,gCACR;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADQ;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAIH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,KAAKF,gBAAL;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA1D6C","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class GoogleAuth extends Component {\r\n\r\n    // create a piece of state that holds our signed in status. Set it to null to begin.\r\n    state = { isSignedIn: null };\r\n\r\n    // When the component first appears in the DOM load up the Auth2 javascript.\r\n    // Make a variable that holds the GAPI getAuthInstance() method, which has methods like signIn(),\r\n    // signOut() and isSignedIn().\r\n    // Then set the state of isSignedIn equal to the getAuthInstance isSignedIn() method.\r\n    // Set up a listen method that calls our function when something changed. The function will\r\n    // set the new state equal to the GAPI isSignedIn method.\r\n\r\n    componentDidMount() {\r\n        window.gapi.load('client:auth2', () => {\r\n            window.gapi.client.init({\r\n                clientId: '284084667086-lip1051ib5uc4s4elb4ab52754g7q4ap.apps.googleusercontent.com',\r\n                scope: 'email'\r\n            }).then(() => {\r\n                this.auth = window.gapi.auth2.getAuthInstance();\r\n                this.setState({ isSignedIn: this.auth.isSignedIn.get() })\r\n                this.auth.isSignedIn.listen(this.onAuthChange)\r\n            })\r\n        });\r\n    }\r\n\r\n    onAuthChange = () => {\r\n        this.setState({ isSignedIn: this.auth.isSignedIn.get()})\r\n    }\r\n\r\n    // check to see the value of our state isSinedIn and conditionally render our login status\r\n\r\n    // wireup on click handlers for when user presses button to sign in or sign out\r\n    //\r\n\r\n    renderAuthButton() {\r\n        if(this.state.isSignedIn === null) {\r\n            return null;\r\n        } else if (this.state.isSignedIn) {\r\n        return (<button\r\n        className=\"ui red google button\"\r\n        onClick={this.auth.signout}>\r\n                <i className=\"google icon\" />\r\n                Sign Out\r\n                </button>)\r\n        } else {\r\n            return (<button className=\"ui red google button\">\r\n            <i className=\"google icon\" />\r\n            Sign In\r\n            </button>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderAuthButton()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import streams from '../apis/streams';\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => {\n  return async (dispatch, getState) => {\n    const {\n      userId\n    } = getState().auth;\n    const response = await streams.post('/streams', { ...formValues,\n      userId\n    });\n    dispatch({\n      type: CREATE_STREAM,\n      payload: response.data\n    }); // after we dispatch the action, programatically navigate to root route\n\n    history.push('/');\n  };\n}; // using short hand for functions that return anonymous functions\n\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('./streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push('/');\n};","map":{"version":3,"sources":["C:/Users/Adam/bug tracker/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,OAAT,EACIC,QADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,YAJJ,EAKIC,aALJ,EAMIC,WANJ,QAOO,SAPP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAET,OADH;AAEHU,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAER;AADH,GAAP;AAEF,CAHK;AAKP,OAAO,MAAMW,YAAY,GAAIC,UAAD,IAAgB;AACxC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClC,UAAM;AAAEP,MAAAA;AAAF,QAAaO,QAAQ,GAAGC,IAA9B;AACA,UAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAC,GAAGL,UAAJ;AAAgBL,MAAAA;AAAhB,KAAzB,CAAvB;AAEAM,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAEP,aAAR;AAAuBQ,MAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,KAAD,CAAR,CAJkC,CAKlC;;AACCpB,IAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,GAPD;AAQH,CATM,C,CAWP;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AAChD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAY,WAAZ,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMI,WAAW,GAAGC,EAAE,IAAI,MAAMV,QAAN,IAAkB;AAC/C,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAJI;AAMP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC5D,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,KAAR,CAAe,YAAWF,EAAG,EAA7B,EAAgCX,UAAhC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,CALM;AAOP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAMV,QAAN,IAAkB;AAClD,QAAMhB,OAAO,CAAC8B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEc;AAAhC,GAAD,CAAR;AACAzB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,CALM","sourcesContent":["import streams from '../apis/streams';\r\nimport history from '../history';\r\nimport { SIGN_IN,\r\n    SIGN_OUT,\r\n    CREATE_STREAM,\r\n    FETCH_STREAMS,\r\n    FETCH_STREAM,\r\n    DELETE_STREAM,\r\n    EDIT_STREAM,\r\n} from './types';\r\n\r\n\r\nexport const signIn = (userId) => {\r\n    return {\r\n        type: SIGN_IN,\r\n        payload: userId\r\n    }\r\n}\r\n\r\nexport const signOut = () => {\r\n    return {\r\n        type: SIGN_OUT\r\n}}\r\n\r\nexport const createStream = (formValues) => {\r\n    return async (dispatch, getState) => {\r\n       const { userId } = getState().auth;\r\n       const response = await streams.post('/streams', {...formValues, userId})\r\n\r\n       dispatch({ type: CREATE_STREAM, payload: response.data })\r\n       // after we dispatch the action, programatically navigate to root route\r\n        history.push('/');\r\n    }\r\n}\r\n\r\n// using short hand for functions that return anonymous functions\r\n\r\nexport const fetchStreams = () => async dispatch => {\r\n    const response = await streams.get('./streams');\r\n\r\n    dispatch({ type: FETCH_STREAMS, payload: response.data})\r\n}\r\n\r\nexport const fetchStream = id => async dispatch => {\r\n    const response = await streams.get(`/streams/${id}`);\r\n\r\n    dispatch({ type: FETCH_STREAM, payload: response.data });\r\n  };\r\n\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n    const response = await streams.patch(`/streams/${id}`, formValues)\r\n\r\n    dispatch({ type: EDIT_STREAM, payload: response.data})\r\n    history.push('/')\r\n}\r\n\r\nexport const deleteStream = (id) => async dispatch => {\r\n    await streams.delete(`/streams/${id}`)\r\n\r\n    dispatch({ type: DELETE_STREAM, payload: id})\r\n    history.push('/')\r\n}"]},"metadata":{},"sourceType":"module"}
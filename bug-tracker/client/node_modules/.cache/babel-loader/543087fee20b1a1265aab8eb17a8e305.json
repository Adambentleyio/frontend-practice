{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adam\\\\streams\\\\client\\\\src\\\\Components\\\\streams\\\\StreamEdit.js\";\nimport _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editStream(this.props.match.params.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    const didMount = this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit a Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StreamForm, {\n        onSubmit: this.onSubmit,\n        initialValues: _.pick(this.props.stream, 'title', 'description')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["C:/Users/Adam/streams/client/src/Components/streams/StreamEdit.js"],"names":["_","React","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","onSubmit","formValues","props","match","params","id","componentDidMount","didMount","render","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAGA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAMvCC,QANuC,GAM5BC,UAAU,IAAI;AACrB,WAAKC,KAAL,CAAWN,UAAX,CAAsB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkDJ,UAAlD;AACH,KARsC;AAAA;;AACvCK,EAAAA,iBAAiB,GAAG;AAElB,UAAMC,QAAQ,GAAG,KAAKL,KAAL,CAAWP,WAAX,CAAuB,KAAKO,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C,CAAjB;AACD;;AAMDG,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKN,KAAL,CAAWO,MAAhB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AACA,QAAA,QAAQ,EAAE,KAAKT,QADf;AAEA,QAAA,aAAa,EAAER,CAAC,CAACkB,IAAF,CAAO,KAAKR,KAAL,CAAWO,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC;AAFf;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAOD;;AAtBsC;;AAyBzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACV,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAFD;;AAIA,eAAeX,OAAO,CACpBiB,eADoB,EAEpB;AAAEhB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFoB,CAAP,CAGbE,UAHa,CAAf","sourcesContent":["import _ from 'lodash';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchStream, editStream } from '../../actions';\r\nimport StreamForm from './StreamForm';\r\n\r\n\r\nclass StreamEdit extends React.Component {\r\n  componentDidMount() {\r\n\r\n    const didMount = this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n\r\n  onSubmit = formValues => {\r\n      this.props.editStream(this.props.match.params.id, formValues)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <h3>Edit a Stream</h3>\r\n        <StreamForm\r\n        onSubmit={this.onSubmit}\r\n        initialValues={_.pick(this.props.stream, 'title', 'description')} />\r\n    </div>)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchStream, editStream }\r\n)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}